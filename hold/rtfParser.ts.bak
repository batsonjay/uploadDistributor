import { Song } from '../types.js';
import { SonglistParser } from './parser.js';
import { readFile } from 'fs/promises';

export class RTFParser implements SonglistParser {
  async parse(filePath: string): Promise<Song[]> {
    const rtfContent = await readFile(filePath, 'utf8');
    
    // Extract plain text from RTF
    const textContent = this.stripRtf(rtfContent);
    
    console.log('Extracted text:', textContent);
    
    // First clean up any RTF artifacts and normalize content
    const cleanContent = textContent
      .replace(/;;/g, '')
      .trim();

    // Add newlines before track numbers to ensure proper separation
    const withNewlines = cleanContent
      // Add newline before track numbers (except first track)
      .replace(/(?<=\S)(\d+[\.\)]?\s+)/g, '\n$1')
      // Clean up any double newlines
      .replace(/\n+/g, '\n')
      .trim();

    // Split into lines and find where tracks start
    const lines = withNewlines.split(/\r\n|\r|\n/);
    const trackStartIndex = lines.findIndex(line => /^\d+[\.\)]?\s/.test(line));
    
    // Get only the track lines
    const tracks = lines
      .slice(trackStartIndex)
      .map(line => line.trim())
      .filter(line => /^\d+[\.\)]?\s/.test(line) && line.length > 0);

    console.log('Clean content:', withNewlines);

    console.log('Tracks after splitting:', tracks);
    
    return tracks.map((track: string) => {
      // Remove track numbers at start of line
      const cleanedTrack = track.replace(/^\d+[\.\)]?\s+/, '');
      
      // Try to find the best split point using various delimiters
      let parts: string[];
      
      // Try each delimiter pattern in order
      const delimiters = [
        // Hyphen with spaces on both sides
        /\s+[-–]\s+/,
        // Hyphen with space on either side
        /\s+[-–]|[-–]\s+/,
        // Bare hyphen (but not within parentheses and not after a number)
        /(?<!\d\s*)[-–](?![^(]*\))(?!\d)/,
        // Multiple spaces (3 or more)
        /\s{3,}/,
        // Tabs
        /\t+/,
        // Fallback: any hyphen not preceded by a number and not within parentheses
        /(?<!\d)[-–](?![^(]*\))/,
        // Last resort: split on first hyphen if no other patterns match
        /-/
      ];
      
      // Try each delimiter until we find one that gives a valid split
      let title = cleanedTrack;
      let artist = 'Unknown Artist';

      for (const delimiter of delimiters) {
        const attempt = cleanedTrack.split(delimiter)
          .map(p => p.trim())
          .filter(p => p.length > 0);
        
        // Check if we have a valid split with non-empty parts
        const firstPart = attempt[0];
        if (attempt.length >= 2 && firstPart && !firstPart.match(/^\d+$/)) {
          title = firstPart;
          const remainingParts = attempt.slice(1);
          if (remainingParts.length > 0) {
            artist = remainingParts.join(' - ');
          }
          break;
        }
      }
      
      return {
        title: title.trim(),
        artist: artist.trim()
      };
    });
  }

      private stripRtf(rtf: string): string {
        // Remove RTF control words and groups
        let text = rtf
          // Remove RTF headers and control words
          .replace(/^{\\rtf1.*?}$/ms, '')
          .replace(/\\[a-z0-9]+(-?\d+)?[ ]?/g, '')
          // Remove curly braces groups
          .replace(/[{}]/g, '')
          // Handle special characters
          .replace(/\\'([0-9a-f]{2})/g, (match, hex) => String.fromCharCode(parseInt(hex, 16)))
          // Handle newlines
          .replace(/\\\n/g, '\n')
          .replace(/\\line/g, '\n')
          .replace(/\\\r/g, '\n')
          .replace(/\\par\b/g, '\n')
          // Remove any remaining backslashes
          .replace(/\\/g, '')
          // Handle quotes
          .replace(/\\'/g, "'")
          .replace(/\\"/g, '"')
          // Add space after track numbers to ensure separation
          .replace(/(\d+[\.\)]?)(\S)/g, '$1 $2')
          // Clean up multiple spaces
          .replace(/[ \t]+/g, ' ')
          .trim();
    
        // Additional cleanup for common RTF artifacts
        return text
          .split(/\r\n|\r|\n/)
          .map(line => line.trim())
          .filter(line => line.length > 0)
          .join('\n');
      }
}
